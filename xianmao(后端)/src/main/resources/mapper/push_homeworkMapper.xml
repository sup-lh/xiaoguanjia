<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mapper.push_homeworkMapper">
  <resultMap id="BaseResultMap" type="com.domain.push_homework">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="workname" jdbcType="VARCHAR" property="workname" />
    <result column="money" jdbcType="INTEGER" property="money" />
    <result column="classname" jdbcType="VARCHAR" property="classname" />
    <result column="schoolname" jdbcType="VARCHAR" property="schoolname" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="worktime" jdbcType="VARCHAR" property="worktime" />
    <result column="flag" jdbcType="INTEGER" property="flag" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.domain.push_homework">
    <result column="homework" jdbcType="LONGVARCHAR" property="homework" />
    <result column="pushopenid" jdbcType="LONGVARCHAR" property="pushopenid" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, workname, money, classname, schoolname, phone, username, worktime, flag
  </sql>
  <sql id="Blob_Column_List">
    homework, pushopenid
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.domain.push_homeworkExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from push_homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.domain.push_homeworkExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from push_homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from push_homework
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from push_homework
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.domain.push_homeworkExample">
    delete from push_homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.domain.push_homework">
    insert into push_homework (id, workname, money, 
      classname, schoolname, phone, 
      username, worktime, flag, 
      homework, pushopenid)
    values (#{id,jdbcType=BIGINT}, #{workname,jdbcType=VARCHAR}, #{money,jdbcType=INTEGER}, 
      #{classname,jdbcType=VARCHAR}, #{schoolname,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{username,jdbcType=VARCHAR}, #{worktime,jdbcType=VARCHAR}, #{flag,jdbcType=INTEGER}, 
      #{homework,jdbcType=LONGVARCHAR}, #{pushopenid,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.domain.push_homework">
    insert into push_homework
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="workname != null">
        workname,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="classname != null">
        classname,
      </if>
      <if test="schoolname != null">
        schoolname,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="worktime != null">
        worktime,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="homework != null">
        homework,
      </if>
      <if test="pushopenid != null">
        pushopenid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="workname != null">
        #{workname,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        #{money,jdbcType=INTEGER},
      </if>
      <if test="classname != null">
        #{classname,jdbcType=VARCHAR},
      </if>
      <if test="schoolname != null">
        #{schoolname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="worktime != null">
        #{worktime,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="homework != null">
        #{homework,jdbcType=LONGVARCHAR},
      </if>
      <if test="pushopenid != null">
        #{pushopenid,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.domain.push_homeworkExample" resultType="java.lang.Long">
    select count(*) from push_homework
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update push_homework
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.workname != null">
        workname = #{record.workname,jdbcType=VARCHAR},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=INTEGER},
      </if>
      <if test="record.classname != null">
        classname = #{record.classname,jdbcType=VARCHAR},
      </if>
      <if test="record.schoolname != null">
        schoolname = #{record.schoolname,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.worktime != null">
        worktime = #{record.worktime,jdbcType=VARCHAR},
      </if>
      <if test="record.flag != null">
        flag = #{record.flag,jdbcType=INTEGER},
      </if>
      <if test="record.homework != null">
        homework = #{record.homework,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.pushopenid != null">
        pushopenid = #{record.pushopenid,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update push_homework
    set id = #{record.id,jdbcType=BIGINT},
      workname = #{record.workname,jdbcType=VARCHAR},
      money = #{record.money,jdbcType=INTEGER},
      classname = #{record.classname,jdbcType=VARCHAR},
      schoolname = #{record.schoolname,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      worktime = #{record.worktime,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=INTEGER},
      homework = #{record.homework,jdbcType=LONGVARCHAR},
      pushopenid = #{record.pushopenid,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update push_homework
    set id = #{record.id,jdbcType=BIGINT},
      workname = #{record.workname,jdbcType=VARCHAR},
      money = #{record.money,jdbcType=INTEGER},
      classname = #{record.classname,jdbcType=VARCHAR},
      schoolname = #{record.schoolname,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      username = #{record.username,jdbcType=VARCHAR},
      worktime = #{record.worktime,jdbcType=VARCHAR},
      flag = #{record.flag,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.domain.push_homework">
    update push_homework
    <set>
      <if test="workname != null">
        workname = #{workname,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=INTEGER},
      </if>
      <if test="classname != null">
        classname = #{classname,jdbcType=VARCHAR},
      </if>
      <if test="schoolname != null">
        schoolname = #{schoolname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="worktime != null">
        worktime = #{worktime,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="homework != null">
        homework = #{homework,jdbcType=LONGVARCHAR},
      </if>
      <if test="pushopenid != null">
        pushopenid = #{pushopenid,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.domain.push_homework">
    update push_homework
    set workname = #{workname,jdbcType=VARCHAR},
      money = #{money,jdbcType=INTEGER},
      classname = #{classname,jdbcType=VARCHAR},
      schoolname = #{schoolname,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      worktime = #{worktime,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=INTEGER},
      homework = #{homework,jdbcType=LONGVARCHAR},
      pushopenid = #{pushopenid,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.domain.push_homework">
    update push_homework
    set workname = #{workname,jdbcType=VARCHAR},
      money = #{money,jdbcType=INTEGER},
      classname = #{classname,jdbcType=VARCHAR},
      schoolname = #{schoolname,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      worktime = #{worktime,jdbcType=VARCHAR},
      flag = #{flag,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>